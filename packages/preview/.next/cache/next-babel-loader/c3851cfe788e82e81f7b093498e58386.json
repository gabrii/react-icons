{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\n\nconst ActiveLink = (_ref) => {\n  let {\n    children,\n    href,\n    activeClassName = \"active\"\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"href\", \"activeClassName\"]);\n\n  const router = useRouter();\n  const child = React.Children.only(children);\n  let className = child.props.className || \"\";\n\n  if (router.asPath === href && activeClassName) {\n    className = `${className} ${activeClassName}`.trim();\n  }\n\n  return __jsx(Link, _extends({\n    href: href\n  }, props), /*#__PURE__*/React.cloneElement(child, {\n    className\n  }));\n};\n\nexport default ActiveLink;","map":null,"metadata":{},"sourceType":"module"}